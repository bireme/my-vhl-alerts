<?php

// Bootup the Composer autoloader
include __DIR__ . '/../api-library/vendor/autoload.php';  

use Mautic\Auth\ApiAuth;

session_start();

$baseURL   = '';
$apiURL    = '';
$publicKey = '';
$secretKey = '';
$callback  = '';

// ApiAuth->newAuth() will accept an array of Auth settings
$settings = array(
    'baseUrl'      => $baseURL,   // Base URL of the Mautic instance
    'version'      => 'OAuth1a',  // Version of the OAuth can be OAuth2 or OAuth1a. OAuth2 is the default value.
    'clientKey'    => $publicKey, // Client/Consumer key from Mautic
    'clientSecret' => $secretKey, // Client/Consumer secret key from Mautic
    'callback'     => $callback   // Redirect URI/Callback URI for this script
);

// If you already have the access token, et al, pass them in as well to prevent the need for reauthorization
if ( array_key_exists("accessTokenData", $_SESSION) ) {
    $settings['accessToken']        = $_SESSION['accessTokenData']['access_token'];
    $settings['accessTokenSecret']  = $_SESSION['accessTokenData']['access_token_secret']; //for OAuth1.0a
    $settings['accessTokenExpires'] = $_SESSION['accessTokenData']['expires']; //UNIX timestamp
}

// Initiate the auth object
$initAuth = new ApiAuth();
$auth = $initAuth->newAuth($settings);

// Initiate process for obtaining an access token; this will redirect the user to the $authorizationUrl and/or set the access_tokens when the user is redirected back after granting authorization

// If the access token is expired, and a refresh token is set above, then a new access token will be requested

try {
    if ($auth->validateAccessToken()) {
        // Obtain the access token returned; call accessTokenUpdated() to catch if the token was updated via a refresh token
        $accessTokenData = $auth->getAccessTokenData();

        // $accessTokenData will have the following keys:
        // For OAuth1.0a: access_token, access_token_secret, expires
        // For OAuth2: access_token, expires, token_type, refresh_token

        if ($auth->accessTokenUpdated()) {
            $accessTokenData = $auth->getAccessTokenData();
        }

        //store access token data however you want
        $_SESSION['accessTokenData'] = $accessTokenData;
    }
} catch (Exception $e) {
    // Do Error handling
    echo "<pre>"; print_r($e); echo "</pre>";

    // Destroys all data registered to the session
    session_destroy();
}